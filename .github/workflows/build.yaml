name: Build and Push Images for Release Branches

on:
  push:
    branches:
      - 'release-*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      # Chọn engine: docker hoặc podman (mặc định docker). Có thể override bằng repository variable CONTAINER_ENGINE.
      CONTAINER_ENGINE: ${{ vars.CONTAINER_ENGINE || 'docker' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # 1) Đọc version Go từ go.mod và chuẩn hóa 1.X.Y -> 1.X
      - name: Detect and normalize Go version from go.mod
        id: gover
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f go.mod ]]; then
            echo "go.mod not found at repo root." >&2
            exit 1
          fi

          RAW=$(awk '/^go[[:space:]]+[0-9]+(\.[0-9]+){1,2}/{print $2; exit}' go.mod || true)
          if [[ -z "${RAW}" ]]; then
            echo "No 'go' directive found in go.mod." >&2
            exit 1
          fi

          # Chuẩn hóa: chỉ giữ major.minor
          NORMALIZED=$(echo "${RAW}" | awk -F. '{print $1"."$2}')
          echo "raw_go=${RAW}" >> $GITHUB_OUTPUT
          echo "go=${NORMALIZED}" >> $GITHUB_OUTPUT
          echo "Detected go version in go.mod: raw=${RAW}, normalized=${NORMALIZED}"

      # 2) Setup Go đúng phiên bản
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.gover.outputs.go }}
          check-latest: true

      - name: Install base deps
        run: |
          sudo apt-get update
          sudo apt-get install -y make git curl jq rsync

      # 3) Ghi đè dòng 'go' trong go.mod về dạng chuẩn trước khi tidy/vendor
      - name: Normalize go directive in go.mod (strip patch if present)
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ steps.gover.outputs.raw_go }}"
          NORM="${{ steps.gover.outputs.go }}"
          if [[ "${RAW}" != "${NORM}" ]]; then
            echo "Normalizing go.mod from 'go ${RAW}' to 'go ${NORM}'"
            # Thay thế chính xác dòng bắt đầu bằng 'go ' chứa RAW
            sed -i -E "s/^go[[:space:]]+${RAW}$/go ${NORM}/" go.mod || true
            # Fallback nếu whitespace khác nhau
            if ! grep -qE "^go[[:space:]]+${NORM}$" go.mod; then
              awk -v norm="${NORM}" '
                BEGIN{done=0}
                { if(!done && $1=="go"){ print "go "norm; done=1 } else { print } }
              ' go.mod > go.mod.tmp && mv go.mod.tmp go.mod
            fi
            go mod tidy
            go mod vendor
          else
            echo "go.mod already normalized to ${NORM}"
          fi

      # 4) Chuẩn bị engine: Docker hoặc Podman (không cài containerd)
      - name: Detect and prepare container engine
        id: engine
        shell: bash
        run: |
          set -euo pipefail
          ENGINE="${CONTAINER_ENGINE}"
          echo "Requested engine: ${ENGINE}"

          if [[ "${ENGINE}" == "docker" ]]; then
            docker version
            docker info
            echo "engine=docker" >> $GITHUB_OUTPUT
          elif [[ "${ENGINE}" == "podman" ]]; then
            sudo apt-get update
            sudo apt-get install -y podman
            podman version
            podman info
            echo "engine=podman" >> $GITHUB_OUTPUT
          else
            echo "Unsupported CONTAINER_ENGINE=${ENGINE}. Use 'docker' or 'podman'." >&2
            exit 1
          fi

      - name: Set up Buildx (Docker)
        if: steps.engine.outputs.engine == 'docker'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to registry (Docker)
        if: steps.engine.outputs.engine == 'docker'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to registry (Podman)
        if: steps.engine.outputs.engine == 'podman'
        run: |
          set -euo pipefail
          podman login "${{ secrets.REGISTRY_URL }}" -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}"

      - name: Install operator-sdk and opm
        run: |
          set -e
          # operator-sdk
          curl -sSL -o operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/v1.33.0/operator-sdk_linux_amd64
          chmod +x operator-sdk && sudo mv operator-sdk /usr/local/bin/operator-sdk
          operator-sdk version || true
          # opm (Operator Registry)
          curl -sSL -o opm https://github.com/operator-framework/operator-registry/releases/download/v1.34.0/linux-amd64-opm
          chmod +x opm && sudo mv opm /usr/local/bin/opm
          opm version || true

      - name: Set image variables
        run: |
          IMAGE_TAG=$(echo "${{ github.ref_name }}" | sed 's/^release-//')
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_NAMESPACE=${{ secrets.REGISTRY_NAMESPACE }}" >> $GITHUB_ENV

      - name: Build and push odf-operator image
        env:
          REGISTRY_NAMESPACE: ${{ env.REGISTRY_NAMESPACE }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          CONTAINER_ENGINE: ${{ env.CONTAINER_ENGINE }}
        run: |
          echo "Building operator image with ${CONTAINER_ENGINE}"
          make CONTAINER_ENGINE=${CONTAINER_ENGINE} docker-build docker-push

      - name: Build and push operator bundle image
        env:
          REGISTRY_NAMESPACE: ${{ env.REGISTRY_NAMESPACE }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          CONTAINER_ENGINE: ${{ env.CONTAINER_ENGINE }}
        run: |
          echo "Building bundle image with ${CONTAINER_ENGINE}"
          make CONTAINER_ENGINE=${CONTAINER_ENGINE} bundle-build bundle-push

      - name: Build and push operator catalog image
        env:
          REGISTRY_NAMESPACE: ${{ env.REGISTRY_NAMESPACE }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          CONTAINER_ENGINE: ${{ env.CONTAINER_ENGINE }}
        run: |
          echo "Building catalog image with ${CONTAINER_ENGINE}"
          make CONTAINER_ENGINE=${CONTAINER_ENGINE} catalog-build catalog-push

      - name: Done
        run: echo "Build completed for tag ${{ env.IMAGE_TAG }} using ${{ env.CONTAINER_ENGINE }}"
